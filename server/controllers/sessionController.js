// controllers/sessionController.js
const Session = require('../models/Session')
const Class = require('../models/Class')
const FacultyAssignment = require('../models/FacultyAssignment')

// Start a new session with QR code
exports.startSession = async (req, res, next) => {
  try {
    const { classId, location } = req.body
    const facultyId = req.user.id

    // Check if faculty is assigned to this class or has proxy assignment
    const classInfo = await Class.findById(classId)

    if (!classInfo) {
      return res.status(404).json({
        success: false,
        message: 'Class not found',
      })
    }

    // Check if faculty is the assigned faculty or has a proxy assignment
    const isAssignedFaculty = classInfo.assignedFaculty.toString() === facultyId

    let isProxyFaculty = false
    if (!isAssignedFaculty) {
      const proxyAssignment = await FacultyAssignment.findOne({
        class: classId,
        proxyFaculty: facultyId,
        date: { $lte: new Date() },
        status: 'active',
      })

      isProxyFaculty = !!proxyAssignment
    }

    if (!isAssignedFaculty && !isProxyFaculty) {
      return res.status(403).json({
        success: false,
        message: 'You are not assigned to this class',
      })
    }

    // Check if there's already an active session for this class
    const existingSession = await Session.findOne({
      class: classId,
      status: 'active',
    })

    if (existingSession) {
      return res.status(400).json({
        success: false,
        message: 'There is already an active session for this class',
      })
    }

    // Create new session (QR code will be generated by pre-save hook)
    const session = await Session.create({
      class: classId,
      faculty: facultyId,
      location: location || 'Not specified',
    })

    // Populate the session data
    const populatedSession = await Session.findById(session._id)
      .populate('class', 'className section subject')
      .populate('faculty', 'name email')

    res.status(201).json({
      success: true,
      message: 'Session started successfully',
      data: populatedSession,
    })
  } catch (error) {
    next(error)
  }
}

// Get session QR code
exports.getSessionQR = async (req, res, next) => {
  try {
    const { sessionId } = req.params

    const session = await Session.findById(sessionId)

    if (!session) {
      return res.status(404).json({
        success: false,
        message: 'Session not found',
      })
    }

    // Check if QR code is still valid, refresh if not
    if (!session.isQRValid()) {
      await session.refreshQRCode()
    }

    res.json({
      success: true,
      data: {
        qrCode: session.qrCode,
        expiry: session.qrCodeExpiry,
        sessionCode: session.sessionCode,
      },
    })
  } catch (error) {
    next(error)
  }
}

// End a session
exports.endSession = async (req, res, next) => {
  try {
    const { sessionId } = req.params

    const session = await Session.findById(sessionId)

    if (!session) {
      return res.status(404).json({
        success: false,
        message: 'Session not found',
      })
    }

    // Check if user is the faculty who started the session
    if (
      session.faculty.toString() !== req.user.id &&
      req.user.role !== 'admin'
    ) {
      return res.status(403).json({
        success: false,
        message: 'You are not authorized to end this session',
      })
    }

    session.status = 'ended'
    session.endTime = new Date()
    await session.save()

    res.json({
      success: true,
      message: 'Session ended successfully',
      data: session,
    })
  } catch (error) {
    next(error)
  }
}

// Get active sessions for a faculty
exports.getFacultySessions = async (req, res, next) => {
  try {
    const facultyId = req.user.id
    const { status } = req.query

    let query = { faculty: facultyId }

    if (status) {
      query.status = status
    }

    const sessions = await Session.find(query)
      .populate('class', 'className section subject')
      .populate('connectedStudents', 'name registrationNumber')
      .sort({ startTime: -1 })

    res.json({
      success: true,
      count: sessions.length,
      data: sessions,
    })
  } catch (error) {
    next(error)
  }
}

// Get session by ID
exports.getSession = async (req, res, next) => {
  try {
    const { sessionId } = req.params

    const session = await Session.findById(sessionId)
      .populate('class', 'className section subject')
      .populate('faculty', 'name email')
      .populate('connectedStudents', 'name registrationNumber')

    if (!session) {
      return res.status(404).json({
        success: false,
        message: 'Session not found',
      })
    }

    res.json({
      success: true,
      data: session,
    })
  } catch (error) {
    next(error)
  }
}
